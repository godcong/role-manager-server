// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: censor.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	censor.proto

It has these top-level messages:
	ValidateRequest
	CensorReply
	CensorReplyDetail
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// CensorService ...
type CensorService interface {
	Validate(ctx context.Context, in *ValidateRequest, opts ...client.CallOption) (*CensorReply, error)
}

type censorService struct {
	c    client.Client
	name string
}

// NewCensorService ...
func NewCensorService(name string, c client.Client) CensorService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &censorService{
		c:    c,
		name: name,
	}
}

// Validate ...
func (c *censorService) Validate(ctx context.Context, in *ValidateRequest, opts ...client.CallOption) (*CensorReply, error) {
	req := c.c.NewRequest(c.name, "CensorService.Validate", in)
	out := new(CensorReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CensorServiceHandler ...
type CensorServiceHandler interface {
	Validate(context.Context, *ValidateRequest, *CensorReply) error
}

// RegisterCensorServiceHandler ...
func RegisterCensorServiceHandler(s server.Server, hdlr CensorServiceHandler, opts ...server.HandlerOption) error {
	type censorService interface {
		Validate(ctx context.Context, in *ValidateRequest, out *CensorReply) error
	}
	type CensorService struct {
		censorService
	}
	h := &censorServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CensorService{h}, opts...))
}

type censorServiceHandler struct {
	CensorServiceHandler
}

// Validate ...
func (h *censorServiceHandler) Validate(ctx context.Context, in *ValidateRequest, out *CensorReply) error {
	return h.CensorServiceHandler.Validate(ctx, in, out)
}
