// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: node.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	node.proto

It has these top-level messages:
	StatusRequest
	RemoteDownloadRequest
	NodeReply
	NodeReplyDetail
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for NodeService service

type NodeService interface {
	RemoteDownload(ctx context.Context, in *RemoteDownloadRequest, opts ...client.CallOption) (*NodeReply, error)
	Status(ctx context.Context, in *StatusRequest, opts ...client.CallOption) (*NodeReply, error)
}

type nodeService struct {
	c    client.Client
	name string
}

func NewNodeService(name string, c client.Client) NodeService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &nodeService{
		c:    c,
		name: name,
	}
}

func (c *nodeService) RemoteDownload(ctx context.Context, in *RemoteDownloadRequest, opts ...client.CallOption) (*NodeReply, error) {
	req := c.c.NewRequest(c.name, "NodeService.RemoteDownload", in)
	out := new(NodeReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeService) Status(ctx context.Context, in *StatusRequest, opts ...client.CallOption) (*NodeReply, error) {
	req := c.c.NewRequest(c.name, "NodeService.Status", in)
	out := new(NodeReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeService service

type NodeServiceHandler interface {
	RemoteDownload(context.Context, *RemoteDownloadRequest, *NodeReply) error
	Status(context.Context, *StatusRequest, *NodeReply) error
}

func RegisterNodeServiceHandler(s server.Server, hdlr NodeServiceHandler, opts ...server.HandlerOption) error {
	type nodeService interface {
		RemoteDownload(ctx context.Context, in *RemoteDownloadRequest, out *NodeReply) error
		Status(ctx context.Context, in *StatusRequest, out *NodeReply) error
	}
	type NodeService struct {
		nodeService
	}
	h := &nodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&NodeService{h}, opts...))
}

type nodeServiceHandler struct {
	NodeServiceHandler
}

func (h *nodeServiceHandler) RemoteDownload(ctx context.Context, in *RemoteDownloadRequest, out *NodeReply) error {
	return h.NodeServiceHandler.RemoteDownload(ctx, in, out)
}

func (h *nodeServiceHandler) Status(ctx context.Context, in *StatusRequest, out *NodeReply) error {
	return h.NodeServiceHandler.Status(ctx, in, out)
}
